 Product.cs.

namespace ProductApi.Models
{
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int Quantity { get; set; }
    }
}

ProductService.cs

using ProductApi.Models;
using System.Collections.Generic;
using System.Linq;

namespace ProductApi.Services
{
    public class ProductService
    {
        private readonly List<Product> _products = new List<Product>();
        private int _nextId = 1;

        public ProductService()
        {
            _products.Add(new Product { Id = _nextId++, Name = "Sample A", Description = "Sample product A", Price = 9.99M, Quantity = 5 });
            _products.Add(new Product { Id = _nextId++, Name = "Sample B", Description = "Sample product B", Price = 19.50M, Quantity = 3 });
        }

        public List<Product> GetAll() => _products.ToList();
        public Product? Get(int id) => _products.FirstOrDefault(p => p.Id == id);

        public Product Add(Product product)
        {
            product.Id = _nextId++;
            _products.Add(product);
            return product;
        }

        public bool Update(int id, Product product)
        {
            var existing = Get(id);
            if (existing == null) return false;

            existing.Name = product.Name;
            existing.Description = product.Description;
            existing.Price = product.Price;
            existing.Quantity = product.Quantity;
            return true;
        }

        public bool Delete(int id)
        {
            var p = Get(id);
            if (p == null) return false;
            _products.Remove(p);
            return true;
        }
    }
}

Program.cs
using ProductApi.Services;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddSingleton<ProductService>();
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

app.UseSwagger();
app.UseSwaggerUI();

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();
app.Run();

ProductsController.

using Microsoft.AspNetCore.Mvc;
using ProductApi.Models;
using ProductApi.Services;

namespace ProductApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ProductsController : ControllerBase
    {
        private readonly ProductService _service;
        public ProductsController(ProductService service) => _service = service;

        [HttpGet]
        public ActionResult<List<Product>> Get() => _service.GetAll();

        [HttpGet("{id}")]
        public ActionResult<Product> Get(int id)
        {
            var product = _service.Get(id);
            if (product == null) return NotFound();
            return product;
        }

        [HttpPost]
        public ActionResult<Product> Post(Product product)
        {
            var added = _service.Add(product);
            return CreatedAtAction(nameof(Get), new { id = added.Id }, added);
        }

        [HttpPut("{id}")]
        public IActionResult Put(int id, Product product)
        {
            if (!_service.Update(id, product)) return NotFound();
            return NoContent();
        }

        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            if (!_service.Delete(id)) return NotFound();
            return NoContent();
        }
    }
}
